 

package propose;

import Cloudme.CloudmeException;
import Cloudme.CloudmeFile;
import Cloudme.CloudmeFolder;
import Cloudme.CloudmeUser;
import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;
import java.io.File;
import java.io.FileInputStream;
import java.math.BigInteger;
import java.net.InetAddress;
import java.nio.charset.Charset;
import java.security.GeneralSecurityException;
import java.security.SignatureException;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import java.util.List;
import static org.apache.poi.hssf.usermodel.HeaderFooter.file;

import org.apache.poi.hwpf.HWPFDocument;

import org.apache.poi.hwpf.extractor.WordExtractor;
import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
/**
 *
 * @author Elcot
 */
public class DataOwnerFrame extends javax.swing.JFrame {

    /**
     * Creates new form DataOwnerFrame
     */
    String name;    
    DBConnection dbn=new DBConnection();
    Statement st=dbn.stt;
     String  ibssign="";
     String em;
       String reqid;
     Random rand=new Random();
        Long s=33l; 
    public DataOwnerFrame(String na) {
        initComponents();
        name=na;
        viewKeyRequest();
    } 
  
    
    public final void viewKeyRequest()
    {
        try
        {
                jComboBox1.removeAllItems();
             DefaultTableModel dm=(DefaultTableModel)jTable1.getModel();
             dm.setRowCount(0);
            ResultSet rs=st.executeQuery("select * from KeyRequest where DataOwnerName='"+name.trim()+"' ");
            while(rs.next())
            {
               reqid=rs.getString(1);
                String doid=rs.getString(2);
                String symkey=rs.getString(3);
                String fn=rs.getString(4);
                
                String fnr=fn.replace("#", ",");
                if(symkey.trim().equals("-"))
                {
                    jComboBox1.addItem(reqid.trim());
                
                   
                    Vector v=new Vector();
                    v.add(reqid.trim());
                    v.add(fnr.trim());
                    dm.addRow(v);
                    
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        try
        {
            ResultSet rs=st.executeQuery("select * from KeyGeneration where DataOnwerName='"+name.trim()+"'");
            if(rs.next())
            {
                String symkey=rs.getString(2);
                jTextField1.setText(symkey.trim());
                jTextField1.setEditable(false);
                jButton2.setEnabled(false);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
         try
        {
            ResultSet rs=st.executeQuery("select * from register where  Name='"+reqid.trim()+"' ");
            if(rs.next())
            {
                em=rs.getString(4);
                 
            }
        }
        catch(Exception e)
        {
           // e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
     
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 0, 153));

        jLabel1.setFont(new java.awt.Font("Andalus", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Admin");

        jButton1.setText("LogOut");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton9.setText("Refresh");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(257, 257, 257)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton9)
                .addGap(26, 26, 26)
                .addComponent(jButton1)
                .addGap(64, 64, 64))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );

        jButton2.setText("Key Generation");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Symmetric Key:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(28, 28, 28)
                        .addComponent(jTextField1)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(149, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Key Generation", jPanel2);

        jLabel4.setText("Enter the Document Name:");

        jLabel5.setText("Enter the Document:");

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel6.setText("Enter Keys (0 to 6 length):");

        jButton3.setText("Encrypt Document");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Upload");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Clear");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton8.setText("Browse");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton8)
                                .addGap(8, 8, 8)))
                        .addGap(35, 35, 35))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                        .addGap(51, 51, 51)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel5)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(35, 35, 35)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Upload Document", jPanel3);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Requested Search User Name", "File name"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jLabel7.setText("Choose Search User Id:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<--Select-->" }));

        jButton7.setText("Provide  Keys");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addGap(32, 32, 32))
        );

        jTabbedPane1.addTab("View Key Request", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        jTextField3.setText("");
        jTextField4.setText("");
        jTextArea1.setText("");
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try
        {
            ResultSet rs=st.executeQuery("select * from KeyGeneration where DataOnwerName='"+name.trim()+"'");
            if(rs.next())
            {
                String symkey=rs.getString(2);
                JOptionPane.showMessageDialog(this, "Keys are already Generated!");
                jTextField1.setText(symkey.trim());
                jTextField1.setEditable(false);
                jButton2.setEnabled(false);
            }
            else
            {
                KeyGenerator keyGen = KeyGenerator.getInstance("AES");
                keyGen.init(128);
                SecretKey secretKey = keyGen.generateKey();
                String symmetricKey=Base64.encode(secretKey.getEncoded());	            
               st.executeUpdate("insert into KeyGeneration values('"+name.trim()+"','"+symmetricKey.trim()+"')");
                JOptionPane.showMessageDialog(this, "Keys are Generated Successfully!");  
                
                jTextField1.setText(symmetricKey.trim());
               
                System.out.println("Symmetric keys from onr aes = "+symmetricKey);
                jTextField1.setEditable(false);
              
                jButton2.setEnabled(false);
            }                                                
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String document=jTextArea1.getText().trim().replaceAll("[^A-Za-z0-9\\s\\.\\,]", "");
        String aeskey=jTextField1.getText().trim();
        System.out.println("aeskey = "+aeskey);
        String stringsymmetrickey=jTextField4.getText().trim()+jTextField1.getText().trim();
        System.out.println("String symmetrik key for signatur "+stringsymmetrickey);
       
        try
        {
            
             String cipherText = Encrypt(document, stringsymmetrickey);       // Key Aggregate Cryptosystem
                          Signature sg=new Signature();	
           ibssign=sg.calculateRFC2104HMAC(document.trim(),aeskey.trim());     // Identity Based Signature (IBS)
                 System.out.println("Signatur = "+ibssign); 
                System.out.println("key for encrytion = "+stringsymmetrickey);
             JOptionPane.showMessageDialog(this,"Document Encrypted Successfully!");
            jTextArea1.setText(cipherText.trim());
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
     
    }//GEN-LAST:event_jButton3ActionPerformed

    
       
    public void cloudupload(File f)
{
    System.out.println("call");
      System.out.println("f = "+f);
       CloudmeFolder newfolder=null;
     try {
 CloudmeUser user = new CloudmeUser("priyanka77","priyanka777$*");
         System.out.println("login 1");
       
           
            if(user.getFolderManager().getFolder("/priyanka")==null)
            {
                
            }
            else     
            {
               newfolder = user.getFolderManager().getFolder("/priyanka");
            }
         
          user.getFileManager().uploadFile(f.getAbsolutePath(), "/priyanka/");
            user.killUser();
            
           //  CloudmeFile file = user.getFileManager().getFile("/"+f.getName());

           // file.deleteFile();
        } catch (CloudmeException ex) {
       try {
             
      CloudmeUser user = new CloudmeUser("priyanka77","priyanka777$*");
            System.out.println("login 2");
           newfolder = user.getFolderManager().getFolder("/priyanka");
          // newfolder.uploadFile(f.getAbsolutePath());
          user.getFileManager().uploadFile(f.getAbsolutePath(), "/priyanka/");
           user.killUser();
          
 //CloudmeFile file = user.getFileManager().getFile("/"+f.getName());

          //  file.deleteFile();
       } catch (CloudmeException ex1) {
           Logger.getLogger(DataOwnerFrame.class.getName()).log(Level.SEVERE, null, ex1);
       }
        }
                      
}
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        String documentname=jTextField3.getText().trim();
        String encrypteddocument=jTextArea1.getText().trim();
        String index=jTextField4.getText().trim();
        
        try
        {
            ResultSet rs=st.executeQuery("select * from Upload1 where DataOwnerName='"+name.trim()+"' and DocumentName='"+documentname.trim()+"'");
            if(rs.next())
            {
                JOptionPane.showMessageDialog(this, "This document is already exists!");                
            }
            else
            {
                st.executeUpdate("insert into Upload1 values('"+name.trim()+"','"+documentname.trim()+"','-','"+index.trim()+"','"+ibssign.trim()+"')");
                file_handling.File_handling.upload("upload\\"+documentname.trim(), encrypteddocument.trim());
            JOptionPane.showMessageDialog(this, "Uploaded Successfully!");
             cloudupload(new File("upload\\"+documentname.trim()));
                JOptionPane.showMessageDialog(this, "Uploaded On Cloud Successfully!");                                    
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton5ActionPerformed
 
    public static String upublic="",filedetails="",filekeys="";
   
    public void getfile()
    {
        filedetails="";
          try
        {
            String user=jComboBox1.getSelectedItem().toString().trim();
            ResultSet rs=st.executeQuery("select * from KeyRequest where RequesterName='"+user.trim()+"'");
            if(rs.next())
            {
              filedetails=rs.getString(4);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
               //System.out.println("filedetails "+filedetails);
    }
    public void filek()
    {
        filekeys="";
          try
        {
              String files[]=filedetails.split("#");
              for(int y=0;y<files.length;y++)
              {
            ResultSet rs=st.executeQuery("select * from upload1 where DocumentName='"+files[y].trim()+"'");
            if(rs.next())
            {
                System.out.println("filekeys in function = "+filekeys);
                
               filekeys=filekeys+rs.getString(4).trim()+",";
            }
              }
               filekeys = filekeys.substring(0, filekeys.lastIndexOf(','));
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
          //System.out.println("filekeys "+filekeys);
    }
      String ce1="";
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
  try
        {
     
getfile();
        filek();
         String En_MSG=filekeys;
         System.out.println("Before agreegate Keys provided by onr to user = "+En_MSG);
   String stringsymmetrickey=jTextField1.getText().trim();
       
         String agreegate = Encrypt(En_MSG, stringsymmetrickey); 
  //  String a="krishna42r@gmail.com";
      st.executeUpdate("update  KeyRequest set SymmetricKey ='"+agreegate+"' where RequesterName='"+jComboBox1.getSelectedItem().toString().trim()+"'");            
           email(em,agreegate);
                   System.out.println(" Mail succufully");
          JOptionPane.showMessageDialog(this,"Aggregate keys sent to '"+reqid+"' Successfully By Mail!");
    
            System.out.println("After agreegate Keys provided by onr to user = "+En_MSG);
          
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
         
    }//GEN-LAST:event_jButton7ActionPerformed
File ff=null;//mail
   public int email(String email,String mesg)
    {
         int min=1;
    int max=10000 ;
     int index=0;
     Random rand=new Random();
       index=rand.nextInt((max-min)+1)+min;
           String to=email.trim();
 
           System.err.println("to = "+to);
           
          try
                 {
                    InetAddress addr = InetAddress.getLocalHost();
                   //// System.out.println("Local HostAddress: " +addr.getHostAddress());
                    String timeStamp = new SimpleDateFormat("dd/MM/yyyy_HH:mm:ss").format(Calendar.getInstance().getTime());
//                    final String Username = "trustee123management@gmail.com"; // your email ID
//                    final String password = "iltecicvm"; /// your password
                    
            final String Username = "priyankaupalanchi94@gmail.com";
            final String password = "priyanka777$*";
            
//             final String Username = "Mehtakishan17@gmail.com";
//            final String password = "kishan21f";
            
                    Properties props = new Properties();
                    props.put("mail.smtp.auth","true");
                    props.put("mail.smtp.starttls.enable", "true");
                    props.put("mail.smtp.ssl.trust", "smtp.gmail.com");
                    props.put("mail.smtp.host","smtp.gmail.com");
                    props.put("mail.smtp.port", "587");
                    Session session = Session.getInstance(props, new javax.mail.Authenticator()
                    {
                        @Override
                        protected javax.mail.PasswordAuthentication getPasswordAuthentication() 
                        {
                                    return new javax.mail.PasswordAuthentication(Username, password);
                        }
                    });
                    Message msg = new MimeMessage(session);
                    msg.setFrom(new InternetAddress("priyankaupalanchi94@gmail.com"));
                    msg.setRecipients(Message.RecipientType.TO,InternetAddress.parse(to.trim()));
                    msg.setSubject("Aggregate keys sent");
                    msg.setContent("<h:body style=background-clor:white;font=verdana;>Aggregate keys sent Successfully By Mail  : <br> : : " +mesg+ "</br><br>Time :" + "</br><br>NOTE :  DO NOT SHARE IT WITH ANYBODY Its Confidentail</br><br></br><br></br><br>Thanks & Regards</br>  </body>","text/html; charset=utf-8");
                   System.err.println("suc 1 ");
                    Transport.send(msg);
                     System.err.println("suc");
 
                }
               catch(Exception e)
               {
                  //// System.out.println(e);
               }
          //// System.out.println(index);
        return index;
    }
     
  


String filename="",h;File rfile=null;
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
    JFileChooser jf=new JFileChooser("./");
    
            int v=jf.showOpenDialog(this);
            
             ff=jf.getSelectedFile();
           
        try {
            FileInputStream ff1=new FileInputStream(ff);
            jTextField3.setText(ff.getName());
            filename=ff.getName();
            System.err.println("fnn txt = "+filename);
             System.err.println("fnn ff = "+ff);
             
   if(filename.endsWith(".txt"))
                {
   
            byte data[]= new byte[ff1.available()];
            ff1.read(data);
            String PText=new String(data);
            jTextArea1.setText(PText);
                }
   
        else    if(filename.endsWith(".docx"))
                {
                   String fname = ff.getAbsolutePath();
                    System.err.println("fname ="+fname);
                         FileInputStream fis = new FileInputStream(fname);

                XWPFDocument document = new XWPFDocument(fis);

                List<XWPFParagraph> paragraphs = document.getParagraphs();


                for (XWPFParagraph para : paragraphs) {
                      h=para.getText();
                   
                }
             
                    jTextArea1.setText(h);
              
            if(jTextArea1.getText().equals(""))  
            {
                
                
                   byte data[]= new byte[ff1.available()];
            ff1.read(data);
            String PText=new String(data);
            jTextArea1.setText(PText);
            }
         
                }
   
   else
        {
       
             byte data[]= new byte[ff1.available()];
            ff1.read(data);
            String PText=new String(data);
            jTextArea1.setText(PText);
        }
        } catch (Exception ex) {
            Logger.getLogger(DataOwnerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
                 
            

    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
       viewKeyRequest();
    }//GEN-LAST:event_jButton9ActionPerformed
  public void clouddelete(File f)
{
  
 
     try {
 CloudmeUser user = new CloudmeUser("krishna42r","9610740742");
      
       
         CloudmeFile file =user.getFileManager().getFile("./krishna/"+f);//
  
           file.deleteFile();
           JOptionPane.showMessageDialog(rootPane, "Deleted succefully");
        } catch (CloudmeException ex) {
        ex.printStackTrace();
        }
                      
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataOwnerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataOwnerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataOwnerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataOwnerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                 new DataOwnerFrame("admin").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables

    public static String convertFlexibleKeysize(String key) throws Exception 
  {
		String validKey="";
		if(key.length()==16)
		{
			validKey=key;
		}
		else
		{			
			if(key.length()<16)
			{
				String te="1234567890123456";
				char ch[]=te.toCharArray();
				for(int i=key.length();i<ch.length;i++)
				{
					key=key+ch[i];
				}
				validKey=key;
			}
			else
			{
				char ch1[]=key.toCharArray();
				String key1="";
				for(int i=0;i<16;i++)
				{
					key1=key1+ch1[i];
				}
				validKey=key1;
			}
		}
		return validKey;
  }
  public static String Decrypt(String file, String ownerid) throws Exception{
        
        String key1 = ownerid;
	String key=convertFlexibleKeysize(key1);
	//System.out.println("Key is "+key);
            
            //Convert string to byte array
        
	BASE64Decoder decoder = new BASE64Decoder();
	byte[] cipherbytes = decoder.decodeBuffer(file);
        
        String afterdecrypt=decrypt(key, cipherbytes);
        return afterdecrypt;
    }

   

    public static String decrypt(String key, byte[] encrypted)
      throws GeneralSecurityException {

    byte[] raw = key.getBytes(Charset.forName("US-ASCII"));
    if (raw.length != 16) {
      throw new IllegalArgumentException("Invalid key size.");
    }
    SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");

    Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
    cipher.init(Cipher.DECRYPT_MODE, skeySpec,
        new IvParameterSpec(new byte[16]));
    byte[] original = cipher.doFinal(encrypted);

    return new String(original, Charset.forName("US-ASCII"));
  }
    
    
     private String Encrypt(String file, String ownerid) throws Exception{        
	String key1 = ownerid;
        
         System.out.println("key use in cncryption function = "+key1);
	String key=convertFlexibleKeysize(key1);
	//System.out.println("Key is "+key);      
	byte[] ciphertext = encrypt(key, file);
	  
            //Convert byte array to String
        BASE64Encoder encoder = new BASE64Encoder();
	String cipherstring = encoder.encode(ciphertext);
        return cipherstring;
    }
    
    public static byte[] encrypt(String key, String value)
      throws GeneralSecurityException {

    byte[] raw = key.getBytes(Charset.forName("US-ASCII"));
    if (raw.length != 16) {
      throw new IllegalArgumentException("Invalid key size.");
    }

    SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
    Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
    cipher.init(Cipher.ENCRYPT_MODE, skeySpec,
        new IvParameterSpec(new byte[16]));
    return cipher.doFinal(value.getBytes(Charset.forName("US-ASCII")));
  }

    public static class SecretKeyGenerator 
    {
	public static enum Mode 
        {
	    ALPHA, ALPHANUMERIC, NUMERIC 
	}
	
	public static String generateRandomString(int length, Mode mode) throws Exception 
        {
		StringBuffer buffer = new StringBuffer();
		String characters = "";

		switch(mode){
		
		case ALPHA:
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
			break;
		
		case ALPHANUMERIC:
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
			break;
	
		case NUMERIC:
			characters = "1234567890";
		    break;
		}
		
		int charactersLength = characters.length();

		for (int i = 0; i < length; i++) {
			double index = Math.random() * charactersLength;
			buffer.append(characters.charAt((int) index));
		}
		return buffer.toString();
	}		
    }
    
    
    
    //****************Signature
    
    
    public static class Signature 
{
	private static final String HMAC_SHA1_ALGORITHM = "HmacSHA1";

	public static String calculateRFC2104HMAC(String data, String key) throws java.security.SignatureException
	{
		String result;
		try 
		{
			// get an hmac_sha1 key from the raw key bytes
			SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(), HMAC_SHA1_ALGORITHM);

			// get an hmac_sha1 Mac instance and initialize with the signing key
			Mac mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
			mac.init(signingKey);

			// compute the hmac on input data bytes
			byte[] rawHmac = mac.doFinal(data.getBytes());

			// base64-encode the hmac
			//result = Encoding.EncodeBase64(rawHmac);
			result = new String(encode(rawHmac));

		}
		catch (Exception e) 
		{
			throw new SignatureException("Failed to generate HMAC : " + e.getMessage());
		}
		return result;
	}	
	
	private static char[] encode(byte[] bytes) {
    final int amount = bytes.length;
    char[] result = new char[2 * amount];

    int j = 0;
    for (int i = 0; i < amount; i++) {
      result[j++] = HEX[(0xF0 & bytes[i]) >>> 4];
      result[j++] = HEX[(0x0F & bytes[i])];
    }

    return result;
  }

  private static final char[] HEX = {
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
  };
}
    
}
